package org.bimserver.pb;

/******************************************************************************
 * Copyright (C) 2009-2014  BIMserver.org
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/
import "ServiceInterface.proto";
option java_generic_services = true;

option java_outer_classname = "AdminInterfaceImpl";

option optimize_for = SPEED;

service AdminInterface {
	rpc clearOutputFileCache (ClearOutputFileCacheRequest) returns (ClearOutputFileCacheResponse);

	rpc disablePlugin (DisablePluginRequest) returns (VoidResponse);

	rpc enablePlugin (EnablePluginRequest) returns (VoidResponse);

	rpc getAllPlugins (GetAllPluginsRequest) returns (GetAllPluginsResponse);

	rpc getBimServerInfo (GetBimServerInfoRequest) returns (GetBimServerInfoResponse);

	rpc getDatabaseInformation (GetDatabaseInformationRequest) returns (GetDatabaseInformationResponse);

	rpc getJavaInfo (GetJavaInfoRequest) returns (GetJavaInfoResponse);

	rpc getLastDatabaseReset (GetLastDatabaseResetRequest) returns (GetLastDatabaseResetResponse);

	rpc getLatestVersion (GetLatestVersionRequest) returns (GetLatestVersionResponse);

	rpc getLogs (GetLogsRequest) returns (GetLogsResponse);

	rpc getMigrations (GetMigrationsRequest) returns (GetMigrationsResponse);

	rpc getProtocolBuffersFile (GetProtocolBuffersFileRequest) returns (GetProtocolBuffersFileResponse);

	rpc getServerInfo (GetServerInfoRequest) returns (GetServerInfoResponse);

	rpc getServerLog (GetServerLogRequest) returns (GetServerLogResponse);

	rpc getServerStartTime (GetServerStartTimeRequest) returns (GetServerStartTimeResponse);

	rpc getSystemInfo (GetSystemInfoRequest) returns (GetSystemInfoResponse);

	rpc getVersion (GetVersionRequest) returns (GetVersionResponse);

	rpc migrateDatabase (MigrateDatabaseRequest) returns (VoidResponse);

	rpc setup (SetupRequest) returns (VoidResponse);

	rpc upgradePossible (UpgradePossibleRequest) returns (UpgradePossibleResponse);

}

message ClearOutputFileCacheRequest {
}

message ClearOutputFileCacheResponse {
	optional string errorMessage = 1;
	optional int32 value = 2;
}

message DisablePluginRequest {
	optional string name = 1;
}

message EnablePluginRequest {
	optional string name = 1;
}

message GetAllPluginsRequest {
}

message SSerializerPluginDescriptor {
	optional int32 rid = 1;
	optional int64 oid = 2;
}

message SModelMergerPluginDescriptor {
	optional int32 rid = 1;
	optional int64 oid = 2;
}

message SWebModulePluginDescriptor {
	optional int32 rid = 1;
	optional int64 oid = 2;
}

message SModelComparePluginDescriptor {
	optional int32 rid = 1;
	optional int64 oid = 2;
}

message SModelCheckerPluginDescriptor {
	optional int32 rid = 1;
	optional int64 oid = 2;
}

message SRenderEnginePluginDescriptor {
	optional int32 rid = 1;
	optional int64 oid = 2;
}

message SQueryEnginePluginDescriptor {
	optional int32 rid = 1;
	optional int64 oid = 2;
}

message SDeserializerPluginDescriptor {
	optional int32 rid = 1;
	optional int64 oid = 2;
}

message SServicePluginDescriptor {
	optional int32 rid = 1;
	optional int64 oid = 2;
}

message SPluginDescriptor {
	required string __actual_type = 1;
	optional SSerializerPluginDescriptor __SSerializerPluginDescriptor = 2;
	optional SModelMergerPluginDescriptor __SModelMergerPluginDescriptor = 3;
	optional SWebModulePluginDescriptor __SWebModulePluginDescriptor = 4;
	optional SModelComparePluginDescriptor __SModelComparePluginDescriptor = 5;
	optional SModelCheckerPluginDescriptor __SModelCheckerPluginDescriptor = 6;
	optional SRenderEnginePluginDescriptor __SRenderEnginePluginDescriptor = 7;
	optional SQueryEnginePluginDescriptor __SQueryEnginePluginDescriptor = 8;
	optional SDeserializerPluginDescriptor __SDeserializerPluginDescriptor = 9;
	optional SServicePluginDescriptor __SServicePluginDescriptor = 10;
	optional string defaultName = 11;
	optional bool enabled = 12;
	optional string simpleName = 13;
	optional string pluginInterfaceClassName = 14;
	optional int32 rid = 15;
	optional string location = 16;
	optional string description = 17;
	optional int64 oid = 18;
	optional string pluginClassName = 19;
	repeated int64 configurations = 20;
}

message GetAllPluginsResponse {
	optional string errorMessage = 1;
	repeated SPluginDescriptor value = 2;
}

message GetBimServerInfoRequest {
}

message SBimServerInfo {
	optional int64 latestDate = 1;
	optional int32 users = 2;
	optional string latestVersion = 3;
	optional int32 projects = 4;
	optional string serverLogUrl = 5;
	optional int64 currentDate = 6;
	optional int32 rid = 7;
	optional int64 oid = 8;
	optional string currentVersion = 9;
	optional int64 started = 10;
	optional int32 revisions = 11;
	optional int32 schemaVersion = 12;
	optional int32 checkouts = 13;
}

message GetBimServerInfoResponse {
	optional string errorMessage = 1;
	optional SBimServerInfo value = 2;
}

message GetDatabaseInformationRequest {
}

message SDatabaseInformationItem {
	optional int32 rid = 1;
	optional int64 oid = 2;
	optional string value = 3;
	optional string key = 4;
}

message SDatabaseInformationCategory {
	optional string title = 1;
	repeated SDatabaseInformationItem items = 2;
	optional int32 rid = 3;
	optional int64 oid = 4;
}

message SDatabaseInformation {
	optional int32 numberOfProjects = 1;
	optional int64 created = 2;
	optional int32 rid = 3;
	optional string location = 4;
	optional int64 oid = 5;
	optional int32 numberOfUsers = 6;
	repeated SDatabaseInformationCategory categories = 7;
	optional int64 databaseSizeInBytes = 8;
	optional string type = 9;
	optional int32 schemaVersion = 10;
	optional int32 numberOfCheckouts = 11;
	optional int32 numberOfRevisions = 12;
}

message GetDatabaseInformationResponse {
	optional string errorMessage = 1;
	optional SDatabaseInformation value = 2;
}

message GetJavaInfoRequest {
}

message SJavaInfo {
	optional string javaFileSeparator = 1;
	optional string javaspecVersion = 2;
	optional string javaClassVersion = 3;
	optional string javaVendor = 4;
	optional int64 heapFree = 5;
	optional string javavmVersion = 6;
	optional string javaIoTmp = 7;
	optional string javaHome = 8;
	optional string javaPathSeparator = 9;
	optional string javaspecVendor = 10;
	optional string javaLineSeparator = 11;
	optional int32 threads = 12;
	optional int32 rid = 13;
	repeated string javaClasspath = 14;
	optional string javaVendorurl = 15;
	optional int64 oid = 16;
	optional string javaExtdir = 17;
	optional int64 heapUsed = 18;
	optional string javaVersion = 19;
	optional string javavmVendor = 20;
	optional string javaspecName = 21;
	optional int64 heapTotal = 22;
	optional string javavmName = 23;
	repeated string javaLibrarypath = 24;
	optional int64 heapMax = 25;
}

message GetJavaInfoResponse {
	optional string errorMessage = 1;
	optional SJavaInfo value = 2;
}

message GetLastDatabaseResetRequest {
}

message GetLastDatabaseResetResponse {
	optional string errorMessage = 1;
	optional int64 value = 2;
}

message GetLatestVersionRequest {
}

message SVersion {
	optional string supportEmail = 1;
	optional int32 revision = 2;
	optional int32 minor = 3;
	optional int32 rid = 4;
	optional int64 oid = 5;
	optional string supportUrl = 6;
	optional string downloadUrl = 7;
	optional int64 date = 8;
	optional int32 major = 9;
}

message GetLatestVersionResponse {
	optional string errorMessage = 1;
	optional SVersion value = 2;
}

message GetLogsRequest {
}

message GetLogsResponse {
	optional string errorMessage = 1;
	repeated SLogAction value = 2;
}

message GetMigrationsRequest {
}

message SMigration {
	optional bool executed = 1;
	optional int32 rid = 2;
	optional string description = 3;
	optional int64 oid = 4;
	optional int32 number = 5;
}

message GetMigrationsResponse {
	optional string errorMessage = 1;
	repeated SMigration value = 2;
}

message GetProtocolBuffersFileRequest {
	optional string interfaceName = 1;
}

message GetProtocolBuffersFileResponse {
	optional string errorMessage = 1;
	optional string value = 2;
}

message GetServerInfoRequest {
}

enum SServerState{
	SServerState_UNDEFINED = 0;
	SServerState_NOT_SETUP = 1;
	SServerState_MIGRATION_REQUIRED = 2;
	SServerState_MIGRATION_IMPOSSIBLE = 3;
	SServerState_FATAL_ERROR = 4;
	SServerState_RUNNING = 5;
}

message SServerInfo {
	optional string errorMessage = 1;
	optional int32 rid = 2;
	optional int64 oid = 3;
	optional SServerState serverState = 4;
}

message GetServerInfoResponse {
	optional string errorMessage = 1;
	optional SServerInfo value = 2;
}

message GetServerLogRequest {
}

message GetServerLogResponse {
	optional string errorMessage = 1;
	optional string value = 2;
}

message GetServerStartTimeRequest {
}

message GetServerStartTimeResponse {
	optional string errorMessage = 1;
	optional int64 value = 2;
}

message GetSystemInfoRequest {
}

message SSystemInfo {
	optional string userDir = 1;
	optional string osname = 2;
	optional string userHome = 3;
	optional int32 rid = 4;
	optional int64 oid = 5;
	optional string userName = 6;
	optional int64 datetime = 7;
	optional string osversion = 8;
	optional int32 cpucores = 9;
}

message GetSystemInfoResponse {
	optional string errorMessage = 1;
	optional SSystemInfo value = 2;
}

message GetVersionRequest {
}

message GetVersionResponse {
	optional string errorMessage = 1;
	optional SVersion value = 2;
}

message MigrateDatabaseRequest {
}

message SetupRequest {
	optional string siteAddress = 1;
	optional string smtpServer = 2;
	optional string smtpSender = 3;
	optional string adminName = 4;
	optional string adminUsername = 5;
	optional string adminPassword = 6;
}

message UpgradePossibleRequest {
}

message UpgradePossibleResponse {
	optional string errorMessage = 1;
	optional bool value = 2;
}


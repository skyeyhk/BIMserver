package org.bimserver.pb;

/******************************************************************************
 * Copyright (C) 2009-2014  BIMserver.org
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/
import "ServiceInterface.proto";
import "AdminInterface.proto";
option java_generic_services = true;

option java_outer_classname = "MetaInterfaceImpl";

option optimize_for = SPEED;

service MetaInterface {
	rpc getAllAsJson (GetAllAsJsonRequest) returns (GetAllAsJsonResponse);

	rpc getEnumLiterals (GetEnumLiteralsRequest) returns (GetEnumLiteralsResponse);

	rpc getServiceInterface (GetServiceInterfaceRequest) returns (GetServiceInterfaceResponse);

	rpc getServiceInterfaces (GetServiceInterfacesRequest) returns (GetServiceInterfacesResponse);

	rpc getServiceMethod (GetServiceMethodRequest) returns (GetServiceMethodResponse);

	rpc getServiceMethodParameters (GetServiceMethodParametersRequest) returns (GetServiceMethodParametersResponse);

	rpc getServiceMethods (GetServiceMethodsRequest) returns (GetServiceMethodsResponse);

	rpc getServiceTypes (GetServiceTypesRequest) returns (GetServiceTypesResponse);

}

message GetAllAsJsonRequest {
}

message GetAllAsJsonResponse {
	optional string errorMessage = 1;
	optional string value = 2;
}

message GetEnumLiteralsRequest {
	optional string enumName = 1;
}

message GetEnumLiteralsResponse {
	optional string errorMessage = 1;
	repeated string value = 2;
}

message GetServiceInterfaceRequest {
	optional string getServiceInterface = 1;
}

message SServiceInterface {
	optional string simpleName = 1;
	optional string nameSpace = 2;
	optional string name = 3;
}

message GetServiceInterfaceResponse {
	optional string errorMessage = 1;
	optional SServiceInterface value = 2;
}

message GetServiceInterfacesRequest {
}

message GetServiceInterfacesResponse {
	optional string errorMessage = 1;
	repeated SServiceInterface value = 2;
}

message GetServiceMethodRequest {
	optional string serviceInterfaceName = 1;
	optional string methodName = 2;
}

message SServiceMethod {
	optional string name = 1;
	optional string doc = 2;
	optional string returnDoc = 3;
}

message GetServiceMethodResponse {
	optional string errorMessage = 1;
	optional SServiceMethod value = 2;
}

message GetServiceMethodParametersRequest {
	optional string serviceInterfaceName = 1;
	optional string serviceMethodName = 2;
}

enum SServiceSimpleType{
	SServiceSimpleType_ENUM = 0;
	SServiceSimpleType_STRING = 1;
	SServiceSimpleType_LONG = 2;
	SServiceSimpleType_INT = 3;
	SServiceSimpleType_BOOLEAN = 4;
	SServiceSimpleType_FLOAT = 5;
	SServiceSimpleType_DOUBLE = 6;
	SServiceSimpleType_DATE = 7;
	SServiceSimpleType_CLASS = 8;
	SServiceSimpleType_DATAHANDLER = 9;
	SServiceSimpleType_BYTEARRAY = 10;
	SServiceSimpleType_LIST = 11;
	SServiceSimpleType_SET = 12;
	SServiceSimpleType_VOID = 13;
	SServiceSimpleType_UNKNOWN = 14;
}

message SServiceField {
	optional SServiceType genericType = 1;
	optional string name = 2;
	optional string doc = 3;
	optional SServiceType type = 4;
}

message SServiceType {
	optional string simpleName = 1;
	optional int32 rid = 2;
	optional int64 oid = 3;
	optional string name = 4;
	optional SServiceSimpleType simpleType = 5;
	repeated SServiceField fields = 6;
}

message SServiceParameter {
	optional SServiceType genericType = 1;
	optional string name = 2;
	optional string doc = 3;
	optional SServiceType type = 4;
}

message GetServiceMethodParametersResponse {
	optional string errorMessage = 1;
	repeated SServiceParameter value = 2;
}

message GetServiceMethodsRequest {
	optional string serviceInterfaceName = 1;
}

message GetServiceMethodsResponse {
	optional string errorMessage = 1;
	repeated SServiceMethod value = 2;
}

message GetServiceTypesRequest {
	optional string serviceInterfaceName = 1;
}

message GetServiceTypesResponse {
	optional string errorMessage = 1;
	repeated SServiceType value = 2;
}

